" Preamble --------------------------------------------------------------- {{{

 set nocompatible

" Plugin disables {{{
 let g:pathogen_disabled = []

if v:version < '703' || !has('python')
	" Python-mode is kinda busted on RHEL6
	call add(g:pathogen_disabled, 'python-mode')
endif
 " }}}

filetype off
execute pathogen#infect()
filetype plugin indent on

" }}}

" General Settings ------------------------------------------------------- {{{

set nobackup            " don't create backup files
set ruler               " display the cursor position
set nohlsearch          " don't highlight search terms
set bs=2                " allow useful backspace in insert mode

" Leader {{{
"
let mapleader = ","
let maplocalleader = "\\"

" }}}

" Tabs and indenting {{{

set tabstop=4
set shiftwidth=4
set shiftround

" Enable fun indenting/functions
set nosi
set autoindent

" }}}

" Color/style {{{

set bg=dark             " black terminal background
syntax on               " syntax highlighting is what the cool kids do
set synmaxcol=800       " Don't try to highlight lines longer than 800 chars.

" Make listchars more muted in color
hi SpecialKey guifg=#5f87df ctermfg=68

" Fix crappy Pmenu colors
hi Pmenu guifg=#ffffff guibg=#444444 ctermfg=255 ctermbg=238
hi PmenuSel guifg=#000000 guibg=#b1d631 ctermfg=0 ctermbg=148

" }}}

" Folding {{{

" map space-bar to toggle folding
noremap <space> za

function! MyFoldText() " {{{
	let line = getline(v:foldstart)

	let nucolwidth = &fdc + &number * &numberwidth
	let windowwidth = winwidth(0) - nucolwidth - 3
	let foldedlinecount = v:foldend - v:foldstart

	" expand tabs into spaces
	let onetab = strpart('          ', 0, &tabstop)
	let line = substitute(line, '\t', onetab, 'g')

	let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
	let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
	return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()

" }}}

" Character Listing {{{

set list
"set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮
set listchars=tab:\>\-

" Only shown when not in insert mode so I don't go insane.
augroup trailing
	au! 
	
	au InsertEnter * :set listchars-=trail:⌴
augroup END

" }}}

" Wildmenu completion {{{

set wildmenu
set wildmode=list:longest

set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.sw?                            " Vim swap files

set wildignore+=*.pyc                            " Python byte code

set wildignore+=*.orig                           " Merge resolution files

" }}}

" Line Return {{{

	" Return to line conditional on g_file_line_return
fun! File_line_return()
	if exists('b:file_line_return') && b:file_line_return != 1
		return
	endif
	if line("'\"") > 0 && line("'\"") <= line("$") |
	    execute 'normal! g`"zvzz' |
	endif
endfunction

" Make sure Vim returns to the same line when you reopen a file.
augroup line_return
	au!
	au BufReadPost * call File_line_return()
augroup END

" }}}

" Terminal settings {{{

set ttyfast
set lazyredraw

" support 256 color terminals
if &term =~ "xterm" || &term =~ "256color"
	set t_Co=256
endif

" }}}

" Tabular {{{

vnoremap <leader>tb :Tabular block<cr>
nnoremap <leader>tb :Tabular block<cr>

" }}}

" Syntastic {{{

nnoremap <leader>sc :SyntasticCheck<cr>
nnoremap <leader>se :Errors<cr>
nnoremap <leader>st :SyntasticToggleMode<cr>

" }}}

" }}}

" Filetype-specific ------------------------------------------------------ {{{

" C {{{

augroup ft_c
	au!

	au FileType c setlocal foldmethod=marker foldmarker={,}
	au FileType c setlocal list!
augroup END

" }}}

" Git Commit {{{

augroup ft_gitcommit
	au!
	" Don't bother with listchars in git commit messages
	au FileType gitcommit setlocal list!
	" Start off on the first line
	au FileType gitcommit let b:file_line_return=0
augroup END

" }}}

" Puppet {{{

augroup ft_puppet
    au!

	au Filetype puppet setlocal foldmethod=marker
	au Filetype puppet setlocal foldmarker={,}
	" Conform to style guide for spaces/tabs
	au Filetype puppet setlocal tabstop=2
	au Filetype puppet setlocal shiftwidth=2
	au Filetype puppet setlocal expandtab
	" perform correct tabbing for => lists
	au Filetype puppet AddTabularPattern! block /^[^=]*\zs=>

	au Filetype puppet let g:syntastic_puppet_lint_arguments=
\'--no-class_parameter_defaults-check ' .
\'--no-documentation-check ' .
\'--no-autoloader_layout-check '
augroup END

" }}}

" Vim {{{

augroup ft_vim
	au!

	au FileType vim setlocal foldmethod=marker
	au FileType help setlocal textwidth=78
	au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END

" }}}

" }}}
